// <auto-generated />
using System;
using EasyCash.Command.Store.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EasyCash.Command.Store.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250304214400_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EasyCash.Command.Store.Repositories.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("content")
                        .HasComment("Content of the message");

                    b.Property<string>("Error")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("error")
                        .HasComment("Error message if the message processing failed");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc")
                        .HasComment("Date when the message was processed");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("type")
                        .HasComment("Type of class for desserializing");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.HasIndex("OccurredOnUtc", "ProcessedOnUtc")
                        .HasDatabaseName("ix_outbox_messages_occurred_on_utc_processed_on_utc");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("OccurredOnUtc", "ProcessedOnUtc"), new[] { "Id", "Type", "Content" });

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("EasyCash.Domain.Abstractions.Idempotency.Entity.IdempotencyEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("request")
                        .HasComment("Request of the message");

                    b.Property<string>("Response")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("response")
                        .HasComment("Response of the message");

                    b.HasKey("Id")
                        .HasName("pk_idempotent_messages");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_idempotent_messages_id");

                    b.ToTable("idempotent_messages", (string)null);
                });

            modelBuilder.Entity("EasyCash.Domain.CashFlow.Entities.TransactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount")
                        .HasComment("Amount of the transaction");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category")
                        .HasComment("Category of the transaction");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("Date when the transaction was created");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date")
                        .HasComment("Date of the transaction");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description")
                        .HasComment("Description of the transaction");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("row_version")
                        .HasDefaultValueSql("1")
                        .HasComment("Concurrency Token");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type")
                        .HasComment("Type of the transaction");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("Date when the transaction was updated");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_transactions_date");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("EasyCash.Domain.Users.Entities.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action")
                        .HasComment("Action of the permission.");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description")
                        .HasComment("Description of the permission.");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("module")
                        .HasComment("Module of the permission.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name")
                        .HasComment("Name of the permission.");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("Module", "Action")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_module_action");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a08dab99-40a0-41ab-b5e5-ba8b727f8f3a"),
                            Action = "All",
                            Description = "Generic permission",
                            Module = "Collaborator",
                            Name = "Gereric permission"
                        },
                        new
                        {
                            Id = new Guid("71901f50-380f-40c5-80ef-292eba6bf82b"),
                            Action = "All",
                            Description = "Admin permission",
                            Module = "Admin",
                            Name = "Admin permission"
                        });
                });

            modelBuilder.Entity("EasyCash.Domain.Users.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description")
                        .HasComment("Description of the role.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name")
                        .HasComment("Name of the role.");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8b1e85b-4492-4a33-b09b-dca91c067f49"),
                            Description = "",
                            IsActive = true,
                            Name = "Collaborator"
                        },
                        new
                        {
                            Id = new Guid("ca9ed27c-c409-486f-a89f-31b8b37b1e56"),
                            Description = "",
                            IsActive = true,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("EasyCash.Domain.Users.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_role_permissions_permission_id_role_id");

                    b.ToTable("role_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("b8b1e85b-4492-4a33-b09b-dca91c067f49"),
                            PermissionId = new Guid("a08dab99-40a0-41ab-b5e5-ba8b727f8f3a")
                        },
                        new
                        {
                            RoleId = new Guid("ca9ed27c-c409-486f-a89f-31b8b37b1e56"),
                            PermissionId = new Guid("71901f50-380f-40c5-80ef-292eba6bf82b")
                        },
                        new
                        {
                            RoleId = new Guid("ca9ed27c-c409-486f-a89f-31b8b37b1e56"),
                            PermissionId = new Guid("a08dab99-40a0-41ab-b5e5-ba8b727f8f3a")
                        });
                });

            modelBuilder.Entity("EasyCash.Domain.Users.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email")
                        .HasComment("user e-mail");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name")
                        .HasComment("The real first name of the user");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name")
                        .HasComment("The real last name of the user");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identity_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid")
                        .HasColumnName("roles_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_role_entity_user_entity");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_role_entity_user_entity_users_id");

                    b.ToTable("role_entity_user_entity", (string)null);
                });

            modelBuilder.Entity("EasyCash.Domain.Users.Entities.RolePermission", b =>
                {
                    b.HasOne("EasyCash.Domain.Users.Entities.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("EasyCash.Domain.Users.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.HasOne("EasyCash.Domain.Users.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_entity_user_entity_role_entity_roles_id");

                    b.HasOne("EasyCash.Domain.Users.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_entity_user_entity_user_entity_users_id");
                });
#pragma warning restore 612, 618
        }
    }
}
